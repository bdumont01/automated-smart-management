---
- name: get satellite manifest from account
  hosts: localhost
  gather_facts: no
  tasks:
    - name: get access token
      uri:
        url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
        method: POST
        return_content: True
        body_format: form-urlencoded
        headers:
            accept: application/json
        body:
          grant_type: refresh_token
          client_id: rhsm-api
          refresh_token: "{{ offline_token }}"
          validate_certs: False
      register: access_token_reponse

    - name: Get manifest list
      uri:
        url: "https://api.access.redhat.com/management/v1/allocations?type=Satellite"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"
          Content-Type: "application/json"
          accept: application/json
        status_code: 200
        return_content: yes
        validate_certs: false
        force_basic_auth: yes
      register: manifests


    - name: get manifest uuid
      set_fact: 
        manifest_uuid: "{{ manifests.json | json_query(get_manifest_id) }}"
      vars:
        get_manifest_id: "body[?name == '{{ manifest_name }}'].uuid"


    - name: Export  manifest
      uri:
        url: "https://api.access.redhat.com/management/v1/allocations/{{ manifest_uuid[0] }}/export"

        method: GET
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"
          Content-Type: "application/zip"
          accept: application/json
        status_code: 200
        return_content: yes
        validate_certs: false
        force_basic_auth: yes
      register: exported_manifest
 
    - name: Check status of Manifest ExportJob
      uri:
        url: "{{ exported_manifest.json.body.href }}"
        status_code: 200
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"
      register: check_manifest_export_reg
      until: check_manifest_export_reg.status == 200
      retries: 10
      delay: 10
      ignore_errors: true
 
    - name: get export_id
      set_fact:
        export_id: "{{ exported_manifest.json.body.exportJobID }}"
 
    - name: Download  manifest
      get_url:
        url: "{{ exported_manifest.json.body.href }}"
        dest: "{{ playbook_dir }}/manifest_insights.zip"
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"


- name: remove manifest
  hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: no
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15
 
  tasks:
    - name: delete existing  manifest
      redhat.satellite.subscription_manifest:
        organization: "Default Organization"
        state: absent
      async: "{{ refresh_timeout }}"
      poll: 0
      register: refresh_async
#      when: refresh_satellite_manifest
 
 
- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15
 
  tasks:
    - name: >
        Watch the Satellite production.log until ManifestRefresh result ==> success appears before continuing...
      wait_for:
        path: /var/log/foreman/production.log
        search_regex: "^.*ManifestRefresh.*state\ changed.*\ stopped\ \ result.*\ success"
        timeout: 1500
        sleep: 20
#      when: refresh_satellite_manifest


- name: add new manifest
  hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: no
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15

  tasks:
    - name: refresh manifest
      redhat.satellite.subscription_manifest:
        organization: "Default Organization"
        state: present
        manifest_path: "{{ playbook_dir }}/manifest_insights.zip"
      async: "{{ refresh_timeout }}"
      poll: 0
      register: refresh_async
#      when: refresh_satellite_manifest


- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15

  tasks:
    - name: >
        Watch the Satellite production.log until ManifestRefresh result ==> success appears before continuing...
      wait_for:
        path: /var/log/foreman/production.log
        search_regex: "^.*ManifestRefresh.*state\ changed.*\ stopped\ \ result.*\ success"
        timeout: 1500
        sleep: 20
#      when: refresh_satellite_manifest


        
      
